using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
static class Database
{
	//These methods can be used to perform common database operations...

	//Filepath and name of database - update this to contain the actual location of your database / 
	//application:

	static string DBpath = "D:\\Users\\Sukhraj Sumal\\University\\Second Year\\Business Programming\\Coursework 2- Code Review Site\\Code Review Site\\Code Review Site\\Login Database.accdb";
		//Creates a new Connection object
	static System.Data.OleDb.OleDbConnection myCon = new System.Data.OleDb.OleDbConnection();
	//The data adaptor is used to fill a DataSet and perform other database operations...
	static System.Data.OleDb.OleDbDataAdapter myDataAdapter;
	//The DataSet contains data retrieved from the database (using the data adaptor).

	//This function connects to the database. The connection is stored in global object 'myCon' and can
	//then be accessed as needed by other functions. Also includes an example of error handling using
	//Try-Catch.
	public static object OpenConnection()
	{
		try {
			//Specifies the connection string needed to connect to the database (including DB location)
			myCon.ConnectionString = "PROVIDER=Microsoft.ACE.OLEDB.12.0;Data Source =" + DBpath;

			myCon.Open();
			//connect to database
			//MsgBox("Success!", MsgBoxStyle.Information, "Connected to Database")
			return true;
			//end function

		} catch (Exception ex) {
			//Show message box if any problems occur when connecting ('ex.Message' will display info 
			//about the error)
			Interaction.MsgBox("Cannot connect to database: " + ex.Message, MsgBoxStyle.Critical, "Connection Error!");
			return false;
		}
	}

	//This subroutine retrieves all data from a database table and puts it inside a DataSet 
	//(using the DataAdaptor).
	public static void GetData(string DBtable, ref DataSet myDataSet)
	{
		//SQL statement to retrieve all data from the specified table
		string sql = "SELECT * FROM " + DBtable;

		//Create instance of data adapter object using specified SQL string and database connection.
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter(sql, myCon);

		//Create new DataSet
		myDataSet = new DataSet();

		//Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
		myDataAdapter.Fill(myDataSet);
	}

	//This subroutine retrieves records meeting the specified criteria and puts them inside a DataSet.
	//E.g. to retrieve all records with a surname beginning with A, use this code:
	//    GetFilteredData("surname LIKE 'A%'")
	public static void GetFilteredData(string DBtable, string criteria, ref DataSet myDataSet)
	{
		//SQL statement to retrieve data meeting the specified criteria from the specified table
		string sql = "SELECT * FROM " + DBtable + " WHERE " + criteria + ";";

		//Create instance of data adapter object using specified SQL string and database connection.
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter(sql, myCon);

		//Create new DataSet
		myDataSet = new DataSet();

		//Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
		myDataAdapter.Fill(myDataSet);
	}

	//This function returns the number of records in the DataSet.
	public static object CountRecords(ref DataSet myDataSet)
	{
		return myDataSet.Tables[0].Rows.Count();
	}

	//This function returns the value of a field in a specific record in the DataSet. Use after running
	//the GetData() or GetFilteredData() subroutine above.
	//
	//E.g. To fill a textbox (called 'TextBox1') with the surname of the second user in your database, 
	//use this code: 
	//    TextBox1.Text = GetDBvalue(2,3)
	//This sets recordNum to 2 (to retrieve the details of the 2nd user), and fieldNum to 3 (to retrieve 
	//the value of the 3rd field in the DB table - the 'surname' field in this case).
	public static object GetDsValue(int recordNum, int fieldNum, ref DataSet myDataSet)
	{
		return myDataSet.Tables[0].Rows[recordNum - 1][fieldNum - 1];
		//[Note: for simplicity, this function accepts 1-based numbers and converts them into 0-based]
	}

	//This subroutine adds data to a new record in the database. To run, you need to specify the names 
	//of the fields to insert (separated by commas), followed by the values of these fields 
	//(separated by commas) - e.g.
	//    AddData( "firstname, surname" , "'Ken', 'Boness'" )
	//[Note: if the field values are strings, remember to surround them with quotes (as shown) - ' ]
	public static void AddData(string DBtable, string fieldNames, string fieldVals)
	{
		//Assemble SQL query to add data to the database based on the values passed to this function.
		string sql = "INSERT INTO " + DBtable + " (" + fieldNames + ") VALUES (" + fieldVals + ")";

		//Create an instance of data adapter (if not created already)
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter();

		//Add command to insert data (using data adaptor) based on SQL query above.
		myDataAdapter.InsertCommand = new System.Data.OleDb.OleDbCommand(sql, myCon);
		//Execute command to insert data into a new database record
		myDataAdapter.InsertCommand.ExecuteNonQuery();
	}

	//This subroutine updates the specified record(s) with new values. To run, you need to specify the 
	//new value(s)of the relevant field(s), as well as which record(s) to update - e.g.
	//    UpdateData( "surname = 'Boness'" , "id = 1" )
	//This will change the surname of record 1 to 'Boness' (note the arrangement of quotes)
	public static void UpdateData(string DBtable, string dataToUpdate, string updateCriteria)
	{
		//Assemble SQL query to update the specified record(s) with the specified value(s)
		string sql = "UPDATE " + DBtable + " SET " + dataToUpdate + " WHERE " + updateCriteria;

		//Create an instance of data adapter (if not created already)
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter();

		//Add command to update data (using data adaptor) based on SQL query above.
		myDataAdapter.UpdateCommand = new System.Data.OleDb.OleDbCommand(sql, myCon);
		//Execute command to update data in the relevant database record(s)
		myDataAdapter.UpdateCommand.ExecuteNonQuery();
	}

	//Closes the database connection - it is a good idea to do this when no longer required...
	public static void CloseCon()
	{
		myCon.Close();
	}

}
